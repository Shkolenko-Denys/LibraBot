from phonenumbers import is_possible_number, parse, NumberParseException
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text

import keyboards
from LibraLibrary import libra_library
from handlers.common import cancel
from dispatcher import dp


class UserLogin(StatesGroup):
    waiting_for_phone_number = State()
    waiting_for_password = State()


@dp.message_handler(Text(equals="–£–≤—ñ–π—Ç–∏ üßë‚Äçüíª"))
async def login_start(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É üìû:",
                         reply_markup=keyboards.CancelKeyboard.keyboard)
    await UserLogin.waiting_for_phone_number.set()


@dp.message_handler(state=UserLogin.waiting_for_phone_number)
async def phone_number_input(message: types.Message, state: FSMContext):
    if message.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå":
        await cancel(message, state)
        return

    try:
        phone_number = parse(message.text)
    except NumberParseException:
        await message.answer("–í–≤–µ–¥–µ–Ω–∏–π —Ä—è–¥–æ–∫ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üòî\n"
                             "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
        return

    if not is_possible_number(phone_number):
        await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É üòî\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
        return

    if not libra_library.find_phone_number(message.text):
        await message.answer("–¶–µ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≤ "
                             "–±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è "
                             "—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å üôÇ")
        return

    await state.update_data(phone_number=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å üîë:")
    await UserLogin.waiting_for_password.set()


@dp.message_handler(state=UserLogin.waiting_for_password)
async def password_input(message: types.Message, state: FSMContext):
    if message.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå":
        await cancel(message, state)
        return

    user_data = await state.get_data()
    if libra_library.login(user_data["phone_number"], message.text):
        await message.answer("–í—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ ‚úÖ",
                             reply_markup=keyboards.StartKeyboard.keyboard)
    else:
        await message.answer(
            "–ü–∞—Ä–æ–ª—å –Ω–µ –≤—ñ—Ä–Ω–∏–π ü§î –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑",
            reply_markup=keyboards.StartKeyboard.keyboard)
    await state.finish()
